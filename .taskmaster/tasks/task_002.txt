# Task ID: 2
# Title: Setup Database Schema in Supabase
# Status: done
# Dependencies: 1
# Priority: high
# Description: Implement the PostgreSQL database schema in Supabase as defined in the PRD.
# Details:
Create a Supabase project and implement the following tables:
- organizations
- users
- campaigns
- links
- invitations

Ensure all tables have the specified columns, constraints, and relationships as defined in the PRD. Set up appropriate indexes for frequently queried columns. Configure row-level security policies to ensure data isolation between organizations.

# Test Strategy:
Verify all tables are created with correct columns, data types, and constraints. Test foreign key relationships by inserting sample data. Validate that indexes are properly created. Test row-level security by attempting cross-organization data access.

# Subtasks:
## 1. Create Supabase Project [done]
### Dependencies: None
### Description: Set up a new Supabase project in the cloud platform
### Details:
Create a new Supabase project through the Supabase dashboard. Configure the project settings including region, database password, and pricing plan. Note down the project URL and API keys for future reference.

## 2. Implement Users Table [done]
### Dependencies: 2.1
### Description: Set up the users table with proper columns and constraints
### Details:
Create a users table that extends Supabase's auth.users table. Include columns for user profile information such as display_name, avatar_url, and any other user-specific data. Set up appropriate constraints and indexes for optimal performance.

## 3. Implement Workspaces Table [done]
### Dependencies: 2.2
### Description: Create the workspaces table with relationships to users
### Details:
Create a workspaces table with columns for workspace name, description, creation date, and owner_id (foreign key to users table). Set up appropriate constraints and indexes. Implement a many-to-many relationship with users through a junction table for workspace members.

## 4. Implement Tasks Table [done]
### Dependencies: 2.2, 2.3
### Description: Set up the tasks table with proper relationships to workspaces and users
### Details:
Create a tasks table with columns for title, description, status, priority, due_date, assigned_to (foreign key to users), and workspace_id (foreign key to workspaces). Set up appropriate constraints and indexes for efficient querying.

## 5. Implement Comments Table [done]
### Dependencies: 2.2, 2.4
### Description: Create the comments table with relationships to tasks and users
### Details:
Create a comments table with columns for content, creation_date, task_id (foreign key to tasks), and user_id (foreign key to users). Set up appropriate constraints and indexes for efficient retrieval of comments for specific tasks.

## 6. Configure Row-Level Security Policies [done]
### Dependencies: 2.2, 2.3, 2.4, 2.5
### Description: Implement RLS policies for all tables to ensure proper data access control
### Details:
Configure Row-Level Security (RLS) policies for all tables to restrict data access based on user roles and permissions. Implement policies for read, insert, update, and delete operations. Ensure workspace members can only access data within their workspaces and that sensitive data is properly protected.

