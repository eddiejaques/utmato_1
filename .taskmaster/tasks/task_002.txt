# Task ID: 2
# Title: Setup Database Schema in Supabase
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Implement the PostgreSQL database schema in Supabase as defined in the PRD, using Supabase-specific features and best practices.
# Details:
Follow these Supabase-specific steps to set up the backend database:

1. **Create Supabase Project:**
   - Use the Supabase dashboard (https://app.supabase.com/) to create a new project.
   - Choose the appropriate region, set a strong database password, and note the project reference (URL) and API keys.

2. **Enable Required Extensions:**
   - In the Supabase dashboard, go to SQL Editor and run:
     ```sql
     -- Enable pgcrypto for UUID generation
     create extension if not exists "pgcrypto";
     ```
   - Enable any other required extensions as needed by your schema.

3. **Create Tables:**
   - Use the SQL Editor to run the schema from `scripts/schema.sql` (extracted from the PRD).
   - Ensure all tables (organizations, users, campaigns, links, invitations) are created with the correct columns and constraints.
   - If using Supabase Auth, consider referencing `auth.users` for user authentication and linking.

4. **Set Up Supabase Auth Integration:**
   - Configure authentication providers (e.g., Google, email/password) in the Auth section of the dashboard.
   - If your app uses the `auth.users` table, ensure your `users` table references it appropriately (e.g., via `user_id` or `clerk_user_id`).

5. **Configure Row Level Security (RLS):**
   - Enable RLS for each table in the Supabase dashboard.
   - Add policies for SELECT, INSERT, UPDATE, DELETE to restrict access based on organization, user role, etc.
   - Example: Only allow users to access rows belonging to their organization.

6. **Verify RLS and Table Access:**
   - Use the Supabase dashboard's Table Editor and API to test access as different users/roles.
   - Attempt cross-organization access to ensure RLS is enforced.

7. **Export and Version Schema:**
   - Save your schema changes in `scripts/schema.sql` for version control and future migrations.
   - Document any manual changes or policies in the repo.

8. **Document Project Details:**
   - Record the Supabase project URL, API keys, and database connection string for backend integration (e.g., in your .env file or secrets manager).

9. **(Optional) Use Supabase CLI:**
   - For local development, install and use the Supabase CLI to run a local Supabase stack and manage migrations.

# Test Strategy:
- Verify all tables and columns exist using the Supabase Table Editor and/or `scripts/check_schema.py`.
- Test RLS by attempting to access data as different users (using Supabase Auth and API).
- Confirm that only authorized users can access/modify data for their organization.
- Validate that all required extensions are enabled.
- Ensure schema changes are versioned in `scripts/schema.sql`.

# Subtasks:
## 1. Create Supabase Project [pending]
### Dependencies: None
### Description: Set up a new Supabase project via the dashboard
### Details:
Create a new Supabase project at https://app.supabase.com/. Configure region, password, and note the project reference and API keys.

## 2. Enable Required Extensions [pending]
### Dependencies: 2.1
### Description: Enable pgcrypto and any other required extensions
### Details:
In the SQL Editor, run `create extension if not exists "pgcrypto";` and enable any other extensions needed by your schema.

## 3. Create Tables via SQL Editor [pending]
### Dependencies: 2.2
### Description: Create all required tables using the schema.sql file
### Details:
Paste and run the contents of `scripts/schema.sql` in the Supabase SQL Editor. Verify table creation in the Table Editor.

## 4. Set Up Supabase Auth Integration [pending]
### Dependencies: 2.3
### Description: Configure authentication providers and user linking
### Details:
Enable Google and email/password auth in the Auth section. Ensure your users table references Supabase Auth users as needed.

## 5. Configure Row Level Security (RLS) [pending]
### Dependencies: 2.4
### Description: Enable and configure RLS policies for all tables
### Details:
Enable RLS for each table in the dashboard. Add policies to restrict access by organization and user role.

## 6. Verify RLS and Table Access [pending]
### Dependencies: 2.5
### Description: Test RLS and access controls using dashboard and API
### Details:
Test access as different users using the dashboard and Supabase API. Attempt cross-organization access to confirm RLS enforcement.

## 7. Export and Version Schema [pending]
### Dependencies: 2.6
### Description: Save schema changes to scripts/schema.sql
### Details:
Export the schema from Supabase and update `scripts/schema.sql` for version control.

## 8. Document Project Details [pending]
### Dependencies: 2.7
### Description: Record project URL, API keys, and connection info
### Details:
Document the Supabase project URL, API keys, and database connection string for backend integration in your .env or secrets manager.

## 9. (Optional) Use Supabase CLI for Local Dev [pending]
### Dependencies: 2.8
### Description: Set up Supabase CLI for local development and migrations
### Details:
Install the Supabase CLI and use it to run a local stack, manage migrations, and test schema changes locally before deploying.

